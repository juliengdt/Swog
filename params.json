{"name":"Swog, Swift + Log","tagline":"A debug log framework for use in Swift projects, mainly based on XCGLogger by @DaveWoodX, but more lighter and more convenient","body":"#Swog, a fork of [XCGLogger](https://github.com/DaveWoodCom/XCGLogger)\r\n\r\n#####By: Julien Gdt\r\n\r\n###tl;dr\r\n\r\nA debug log module for use in Swift projects. Allows you to log details to the console (and optionally a file), just like you would have with NSLog or println, but with additional information such as the date, function name, filename and line number.\r\n\r\n###tl;dr Bis\r\n\r\nForked from [XCGLogger](https://github.com/DaveWoodCom/XCGLogger), which is a good solution but not perfect for me and for a team usage.\r\n\r\nGo from this:\r\n\r\n```Simple message```\r\n\r\nto this:\r\n\r\n```[DEBUG] [AppDelegate - 40] application(_:didFinishLaunchingWithOptions:): Simple message```\r\n\r\n###Compatibility\r\n\r\nXCGLogger works in both iOS and OS X projects. It is a Swift library intended for use in Swift projects.\r\n\r\nSwift does away with the C preprocessor, which kills the ability to use ```#define``` macros. This means our traditional way of generating nice debug logs is dead. Resorting to just plain old ```println``` calls means you lose a lot of helpful information, or requires you to type a lot more code.\r\n\r\n**Note:** There are a few differences in Swift between 1.0 (Xcode 6) and 1.1 (Xcode 6.1), the code in this repo should work on (and will be updated for) the latest version of Swift by default. If you're using Xcode 6.0.1, I've added a file ```XCGLogger_Xcode601.swift``` to the project that makes XCGLogger backwards compatible. You just need to include the file in the three targets: XCGLogger (iOS), XCGLogger (OS X), and XCGLoggerTests in the XCGLogger project.\r\n\r\n###How to Use\r\n3 ways to use it:\r\n\r\n- Simple Logging\r\n- Levelled Developer Logging\r\n- Lifecycle Logging\r\n\r\n#### Simple Logging\r\nBecause println is so ugly; put a Swog like this\r\n\r\n    Swog(\"Foo\")\r\n\r\nto get this:\r\n\r\n    Foo\r\n\r\n#### Levelled Developer Logging\r\n80% of the Swog usage. 4 levels of logging:\r\n\r\n - DEBUG\r\n - INFO\r\n - WARN\r\n - ERROR\r\n\r\nYou can use it like this\r\n\r\n    Swog.info(\"wanna info !\")\r\n    Swog.error(\"wanna error !\")\r\n\r\nto get this:\r\n\r\n    [INFO] [ViewController: 17] viewDidLoad(): wanna info !\r\n    [ERRO] [ViewController: 18] viewDidLoad(): wanna error !\r\n\r\n\r\n#### LifeCycle Logging\r\nBecause I just want to know the lifecycle directly in my Logs, just put:\r\n\r\n    Swog.Lifecycle()\r\n\r\nin the beginning of each of your class (for ex viewWillAppear:) to get this:\r\n\r\n    #[ViewController] - viewWillAppear\r\n\r\n###To Do\r\n- Add able to enable color logging \r\n- Maybe add crash log save file\r\n\r\n\r\n###Change Log\r\n\r\nTODO !\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}